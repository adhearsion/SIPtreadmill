- content_for(:page_icon) { "icon-rocket" }
- content_for(:page_title) { "Showing Test Run" }
- content_for(:page_subtitle) { "#{@test_run.name}"}
= render "layouts/page_header"
#page_test_run.container-fluid.padded
  .row-fluid
    .span3
      .box
        .box-header
          %span.title= @test_run.name
          %ul.box-toolbar
            %li= link_to '', test_runs_path, class: 'btn btn-primary icon-list', title: 'List'
            - if @test_run.state == 'pending'
              %li= link_to '', edit_test_run_path(@test_run), class: 'btn btn-warning icon-edit', title: 'Edit'
              %li= link_to '', "/test_runs/#{@test_run.id}/copy", class: 'btn alert-info icon-copy', title: "Clone"
              %li= link_to '', @test_run, method: :delete, data: { confirm: 'Are you sure?' }, class: 'btn btn-danger icon-trash', title: 'Delete'
        .box-content.padded
          %dl
            %dt Name:
            %dd= @test_run.name
            %dt Description:
            %dd= @test_run.description
            - if current_user.admin_mode
              %dt Owned by
              %dd= @test_run.user.full_name if @test_run.user

            %dt Sender scenario:
            %dd= link_to(@test_run.scenario.name, @test_run.scenario) if @test_run.scenario

            %dt Registration scenario:
            %dd= link_to(@test_run.registration_scenario.name, @test_run.registration_scenario) if @test_run.registration_scenario

            %dt Receiver scenario:
            %dd= link_to(@test_run.receiver_scenario.name, @test_run.receiver_scenario) if @test_run.receiver_scenario

            %dt Profile:
            %dd= link_to @test_run.profile_name, @test_run.profile
            %dd= "Max Calls: #{@test_run.profile.max_calls}"
            %dd= "Max Concurrent: #{@test_run.profile.max_concurrent}"
            %dd= "CPS: #{@test_run.profile.calls_per_second}"
            %dd= "Transport type: #{@test_run.profile.transport_type.text}"

            %dt Target:
            %dd= link_to @test_run.target_name, @test_run.target
            %dd= "Address: #{@test_run.target.address}"

            %dt Created By:
            %dd= @test_run.user.full_name if @test_run.user

            %dt Created On:
            %dd
              %a{"data-original-title" => @test_run.created_at.to_s(:long_ordinal), "data-placement" => "right", "data-toggle" => "tooltip", :href => "#", :title => ""}
                = time_ago_in_words(@test_run.created_at) + " ago"

            - if @test_run.created_at != @test_run.updated_at
              %dt Last Updated On:
              %dd
                %a{"data-original-title" => @test_run.updated_at.to_s(:long_ordinal), "data-placement" => "right", "data-toggle" => "tooltip", :href => "#", :title => ""}
                  = time_ago_in_words(@test_run.updated_at) + " ago"

            %dt Status
            %dd= status_label @test_run.state

            - if @test_run.state == 'complete_with_errors'
              %dt Error Name
              %dd= @test_run.error_name
              %dt Error Message
              %dd= @test_run.error_message

    .span9
      - case @test_run.state
        - when 'pending'
          .box
            .box-header
              %span.title Job pending
            .box-content.padded
              = form_tag enqueue_test_run_path(@test_run), method: "post" do
                - unless @test_run.target.ssh_username.nil? || @test_run.target.ssh_username.empty?
                  = password_field_tag :password
                  = label_tag :password, "SSH Password for Target"
                = submit_tag "Enqueue", {class: "btn btn-success"}
        - when 'queued'
          .box
            .box-header
              %span.title Job is queued, #{@stats.enqueued} jobs in the queue
            .box-content.padded
              %p
                Page will refresh in
                %span#countdown-secs
              %p
                = button_to "Cancel", cancel_test_run_path(@test_run), {class: "btn btn-danger"}
        - when 'running'
          .box
            .box-header
              %span.title The job is running right now!
            .box-content.padded
              %p
                Page will refresh in
                %span#countdown-secs
              %p
                = button_to "stop", stop_test_run_path(@test_run), {class: "btn btn-danger"}
        - when 'complete', 'complete_with_warnings', 'complete_with_errors'
          .row-fluid
            .span12
              .box
                .box-header
                  %span.title Test run summary
                .box-content.padded
                  %pre{style: 'font-size: 0.8em'}
                    = @test_run.summary_report
              .box
                .box-header
                  %span.title Test run results
                .box-content.padded
                  %h2 Total Calls
                  #callsChart{style: 'height: 250px'}
                    %svg
                  %h3 Calls Per Second / Concurrent Calls
                  #callRateChart{style: 'height: 250px'}
                    %svg
                  %h2 Jitter
                  #jitterChart{style: 'height: 250px'}
                    %svg
                  %h2 Packet Loss
                  #packetLossChart{style: 'height: 250px'}
                    %svg
                  %h2 Target Resources
                  #targetResourcesChart{style: 'height: 250px'}
                    %svg
          .row-fluid
            .span6
              .box
                .box-header
                  %span.title Performance
                .box-content.padded
                  %dl
                    %dt Total calls
                    %dd= @test_run.total_calls
                    %dt Successful calls
                    %dd= @test_run.successful_calls
                    %dt Failed calls
                    %dd= @test_run.failed_calls
                    %dt Average call duration
                    %dd= @test_run.avg_call_duration
                    %dt Average CPS
                    %dd= @test_run.avg_cps

            .span6
              .box
                .box-header
                  %span.title QoS
                .box-content.padded
                  %dl
                    %dt Average jitter
                    %dd= @test_run.avg_jitter
                    %dt Max jitter
                    %dd= @test_run.max_jitter
                    %dt Average packet loss
                    %dd= @test_run.avg_packet_loss
                    %dt Max packet loss
                    %dd= @test_run.max_packet_loss

- if @test_run.state == 'queued' || @test_run.state == 'running'
  :javascript
    $(function(){
      $('#countdown-secs').countdown({
        date: +(new Date) + 10000,
        render: function(data) {
          $(this.el).text(data.sec + "s");
        },
        onEnd: function() {
          location.reload(true);
        }
      });
    });
- if @test_run.state =~ /complete/
  :javascript
    $(function() {
      drawTotalCallsGraph(#{@test_run.total_calls_json}, '#callsChart');
      drawLineGraph(#{@test_run.jitter_json}, {'target': '#jitterChart', 'xAxis': 'Time', 'yAxis': 'Jitter'});
      drawLineGraph(#{@test_run.packet_loss_json}, {'target': '#packetLossChart', 'xAxis': 'Time', 'yAxis': 'Packet Loss'});
      drawLineGraph(#{@test_run.call_rate_json}, {'target': '#callRateChart', 'xAxis': 'Time', 'yAxis': 'Calls'});
      drawLineGraph(#{@test_run.target_resources_json}, {'target': '#targetResourcesChart', 'xAxis': 'Time', 'yAxis': 'Resources'});
    });
